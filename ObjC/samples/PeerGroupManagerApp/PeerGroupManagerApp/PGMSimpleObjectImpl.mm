////////////////////////////////////////////////////////////////////////////////
//
//  ALLJOYN MODELING TOOL - GENERATED CODE
//
//  This is an autogenerated or copied file which Qualcomm Innovation Center,
//  Inc., as author hereby dedicates to the public domain.  Additionally, THIS
//  SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND ANY CONTRIBUTORS "AS IS"
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE,
//  AND OF GOOD TITLE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
//  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
//  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
//  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
//  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
////////////////////////////////////////////////////////////////////////////////
//
//  DO NOT EDIT
//
//  Add a category or subclass in separate .h/.m files to extend these classes
//
////////////////////////////////////////////////////////////////////////////////
//
//  PGMSimpleObjectImpl.mm
//
////////////////////////////////////////////////////////////////////////////////

#import <alljoyn/BusAttachment.h>
#import <alljoyn/BusObject.h>
#import "AllJoynFramework/AJNBusObjectImpl.h"
#import "AllJoynFramework/AJNInterfaceDescription.h"
#import "AllJoynFramework/AJNMessageArgument.h"
#import "AllJoynFramework/AJNSignalHandlerImpl.h"

#import "PGMSimpleObjectImpl.h"

using namespace ajn;


@interface AJNMessageArgument(Private)

/**
 * Helper to return the C++ API object that is encapsulated by this objective-c class
 */
@property (nonatomic, readonly) MsgArg *msgArg;


@end


////////////////////////////////////////////////////////////////////////////////
//
//  C++ Bus Object class declaration for SimpleObjectImpl
//
////////////////////////////////////////////////////////////////////////////////
class SimpleObjectImpl : public AJNBusObjectImpl
{
private:
    const InterfaceDescription::Member* PingSignalMember;

    //TODO Workaround for the "AJNBusObjectImpl constructor requires a bus attachment" problem
    static BusAttachment& getDummyBusAttachment()
    {
        static BusAttachment* dummyBusAttachment = NULL;
        
        if (dummyBusAttachment == NULL)
        {
            dummyBusAttachment = new BusAttachment("");
        }
        
        return *dummyBusAttachment;
    }

public:
    SimpleObjectImpl(const char *path, id<SimpleDelegate> aDelegate);

    SimpleObjectImpl(BusAttachment &bus, const char *path, id<SimpleDelegate> aDelegate);

    virtual QStatus InitializeBusInterface(BusAttachment &bus);
    
    
    
    // methods
    //
    
    
    // signals
    //
    QStatus SendPing(const char * Str, const char* destination, SessionId sessionId, uint16_t timeToLive = 0, uint8_t flags = 0);

};
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//
//  C++ Bus Object implementation for SimpleObjectImpl
//
////////////////////////////////////////////////////////////////////////////////

SimpleObjectImpl::SimpleObjectImpl(const char *path, id<SimpleDelegate> aDelegate) :
    AJNBusObjectImpl(getDummyBusAttachment(),path,aDelegate)
{
    // Intentionally empty
}

SimpleObjectImpl::SimpleObjectImpl(BusAttachment &bus, const char *path, id<SimpleDelegate> aDelegate) :
    AJNBusObjectImpl(bus,path,aDelegate)
{
    //TODO Workaround for the "AJNBusObjectImpl constructor ignoring the bus attachment" problem
    this->bus = &bus;
    
    InitializeBusInterface(bus);
}

QStatus SimpleObjectImpl::InitializeBusInterface(BusAttachment &bus)
{
    const InterfaceDescription* interfaceDescription = NULL;
    QStatus status;
    status = ER_OK;
    
    
    // Add the org.alljoyn.bus.samples.simple.SimpleInterface interface to this object
    //
    interfaceDescription = bus.GetInterface("org.alljoyn.bus.samples.simple.SimpleInterface");
    assert(interfaceDescription);
    status = AddInterface(*interfaceDescription);

    if (ER_OK != status) {
        NSLog(@"ERROR: An error occurred while adding the interface org.alljoyn.bus.samples.simple.SimpleInterface. %@", [AJNStatus descriptionForStatusCode:status]);
    }
    
    
    // save off signal members for later
    //
    PingSignalMember = interfaceDescription->GetMember("Ping");
    assert(PingSignalMember);    


    return status;
}


QStatus SimpleObjectImpl::SendPing(const char * Str, const char* destination, SessionId sessionId, uint16_t timeToLive, uint8_t flags)
{

    MsgArg args[1];

    
            args[0].Set( "s", Str );
        

    return Signal(destination, sessionId, *PingSignalMember, args, 1, timeToLive, flags);
}



////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//
//  C++ Signal Handler implementation for SimpleDelegate
//
////////////////////////////////////////////////////////////////////////////////

class SimpleDelegateSignalHandlerImpl : public AJNSignalHandlerImpl
{
private:
    SessionIdToGroupName groupNameLookup;

    const ajn::InterfaceDescription::Member* PingSignalMember;

    void PingSignalHandler(const ajn::InterfaceDescription::Member* member, const char* srcPath, ajn::Message& msg);

    
public:
    /**
     * Constructor for the AJN signal handler implementation.
     *
     * @param aDelegate         Objective C delegate called when one of the below virtual functions is called.     
     */    
    SimpleDelegateSignalHandlerImpl(id<AJNSignalHandler> aDelegate);
    
    virtual void SetGroupNameLookup(SessionIdToGroupName lookupToSet);

    virtual void RegisterSignalHandler(ajn::BusAttachment &bus);
    virtual void UnregisterSignalHandler(ajn::BusAttachment &bus);
    
    /**
     * Virtual destructor for derivable class.
     */
    virtual ~SimpleDelegateSignalHandlerImpl();
};


/**
 * Constructor for the AJN signal handler implementation.
 *
 * @param aDelegate         Objective C delegate called when one of the below virtual functions is called.     
 */    
SimpleDelegateSignalHandlerImpl::SimpleDelegateSignalHandlerImpl(id<AJNSignalHandler> aDelegate) : AJNSignalHandlerImpl(aDelegate)
{
	PingSignalMember = NULL;

    groupNameLookup = NULL;
}

SimpleDelegateSignalHandlerImpl::~SimpleDelegateSignalHandlerImpl()
{
    m_delegate = NULL;
}

void SimpleDelegateSignalHandlerImpl::SetGroupNameLookup(SessionIdToGroupName lookupToSet)
{
    groupNameLookup = lookupToSet;
}

void SimpleDelegateSignalHandlerImpl::RegisterSignalHandler(ajn::BusAttachment &bus)
{
    QStatus status;
    status = ER_OK;
    const ajn::InterfaceDescription* interface = NULL;
    
    ////////////////////////////////////////////////////////////////////////////
    // Register signal handler for signal Ping
    //
    interface = bus.GetInterface("org.alljoyn.bus.samples.simple.SimpleInterface");

    if (interface) {
        // Store the Ping signal member away so it can be quickly looked up
        PingSignalMember = interface->GetMember("Ping");
        assert(PingSignalMember);

        
        // Register signal handler for Ping
        status =  bus.RegisterSignalHandler(this,
            static_cast<MessageReceiver::SignalHandler>(&SimpleDelegateSignalHandlerImpl::PingSignalHandler),
            PingSignalMember,
            NULL);
            
        if (status != ER_OK) {
            NSLog(@"ERROR: Interface SimpleDelegateSignalHandlerImpl::RegisterSignalHandler failed. %@", [AJNStatus descriptionForStatusCode:status] );
        }
    }
    else {
        NSLog(@"ERROR: org.alljoyn.bus.samples.simple.SimpleInterface not found.");
    }
    ////////////////////////////////////////////////////////////////////////////    

}

void SimpleDelegateSignalHandlerImpl::UnregisterSignalHandler(ajn::BusAttachment &bus)
{
    QStatus status;
    status = ER_OK;
    const ajn::InterfaceDescription* interface = NULL;
    
    ////////////////////////////////////////////////////////////////////////////
    // Unregister signal handler for signal Ping
    //
    interface = bus.GetInterface("org.alljoyn.bus.samples.simple.SimpleInterface");

    // Store the Ping signal member away so it can be quickly looked up
    PingSignalMember = interface->GetMember("Ping");
    assert(PingSignalMember);
    
    // Unregister signal handler for Ping
    status =  bus.UnregisterSignalHandler(this,
        static_cast<MessageReceiver::SignalHandler>(&SimpleDelegateSignalHandlerImpl::PingSignalHandler),
        PingSignalMember,
        NULL);
        
    if (status != ER_OK) {
        NSLog(@"ERROR:SimpleDelegateSignalHandlerImpl::UnregisterSignalHandler failed. %@", [AJNStatus descriptionForStatusCode:status] );
    }
    ////////////////////////////////////////////////////////////////////////////    

}


void SimpleDelegateSignalHandlerImpl::PingSignalHandler(const ajn::InterfaceDescription::Member* member, const char* srcPath, ajn::Message& msg)
{
    @autoreleasepool {
        
    qcc::String inArg0 = msg->GetArg(0)->v_string.str;
        
        NSString *from = [NSString stringWithCString:msg->GetSender() encoding:NSUTF8StringEncoding];
        NSString *objectPath = [NSString stringWithCString:msg->GetObjectPath() encoding:NSUTF8StringEncoding];
        AJNSessionId sessionId = msg->GetSessionId();        
        NSLog(@"Received Ping signal from %@ on path %@ for session id %u [%s > %s]", from, objectPath, msg->GetSessionId(), msg->GetRcvEndpointName(), msg->GetDestination() ? msg->GetDestination() : "broadcast");
        
        dispatch_async(dispatch_get_main_queue(), ^{
            
            [(id<SimpleDelegateSignalHandler>)m_delegate didReceivePingString:[NSString stringWithCString:inArg0.c_str() encoding:NSUTF8StringEncoding] group:groupNameLookup(sessionId) fromSender:from];
                
        });
    }
}


////////////////////////////////////////////////////////////////////////////////
    
////////////////////////////////////////////////////////////////////////////////
//
//  Objective-C Bus Object implementation for AJNSimpleObject
//
////////////////////////////////////////////////////////////////////////////////

@interface AJNSimpleObject()

/**
 * The bus attachment this object is associated with.
 */
@property (nonatomic, weak) AJNBusAttachment *bus;

@end

@implementation AJNSimpleObject

@dynamic handle;
@synthesize bus = _bus;



- (SimpleObjectImpl*)busObject
{
    return static_cast<SimpleObjectImpl*>(self.handle);
}

- (QStatus)registerInterfacesWithBus:(AJNBusAttachment *)busAttachment
{
    QStatus status;

    status = [self activateInterfacesWithBus: busAttachment];

    self.busObject->InitializeBusInterface(*((ajn::BusAttachment*)busAttachment.handle));
    
    return status;
}

- (QStatus)activateInterfacesWithBus:(AJNBusAttachment *)busAttachment
{
    QStatus status;

    status = ER_OK;
    
    AJNInterfaceDescription *interfaceDescription;
    
    
        //
        // SimpleDelegate interface (org.alljoyn.bus.samples.simple.SimpleInterface)
        //
        // create an interface description, or if that fails, get the interface as it was already created
        //
        interfaceDescription = [busAttachment createInterfaceWithName:@"org.alljoyn.bus.samples.simple.SimpleInterface"];
        
    
        // add the signals to the interface description
        //
    
        status = [interfaceDescription addSignalWithName:@"Ping" inputSignature:@"s" argumentNames:[NSArray arrayWithObjects:@"Str", nil]];
        
        if (status != ER_OK && status != ER_BUS_MEMBER_ALREADY_EXISTS) {
            @throw [NSException exceptionWithName:@"BusObjectInitFailed" reason:@"Unable to add signal to interface:  Ping" userInfo:nil];
        }

    
        [interfaceDescription activate];

    
    self.bus = busAttachment;

    return status;
}

- (id)initWithPath:(NSString *)path
{
    self = [super initWithPath:path];
    if (self) {

        // create the internal C++ bus object
        //
        SimpleObjectImpl *busObject = new SimpleObjectImpl([path UTF8String], (id<SimpleDelegate>)self);
        
        self.handle = busObject;
    }
    return self;
}

- (id)initWithBusAttachment:(AJNBusAttachment *)busAttachment onPath:(NSString *)path
{
    self = [super initWithBusAttachment:busAttachment onPath:path];
    if (self) {
        [self activateInterfacesWithBus: busAttachment];
        
        // create the internal C++ bus object
        //
        SimpleObjectImpl *busObject = new SimpleObjectImpl(*((ajn::BusAttachment*)busAttachment.handle), [path UTF8String], (id<SimpleDelegate>)self);
        
        self.handle = busObject;
    }
    return self;
}

- (void)dealloc
{
    SimpleObjectImpl *busObject = [self busObject];
    delete busObject;
    self.handle = nil;
}

    
- (void)sendPingString:(NSString*)Str group:(NSString *)groupName toDestination:(NSString*)destinationPath

{
    
    self.busObject->SendPing([Str UTF8String], [destinationPath UTF8String], self.sessionIdLookup(groupName));
        
}

- (void)registerSimpleDelegateSignalHandler:(id<SimpleDelegateSignalHandler>)signalHandler
{
    SimpleDelegateSignalHandlerImpl *signalHandlerImpl = new SimpleDelegateSignalHandlerImpl(signalHandler);
    signalHandlerImpl->SetGroupNameLookup(self.groupNameLookup);
    signalHandler.handle = signalHandlerImpl;
    [self.bus registerSignalHandler:signalHandler];
}
    

@end

////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//
//  Objective-C Proxy Bus Object implementation for SimpleObject
//
////////////////////////////////////////////////////////////////////////////////

@interface SimpleObjectProxy(Private)

@property (nonatomic, strong) AJNBusAttachment *bus;

- (ProxyBusObject*)proxyBusObject;

@end

@implementation SimpleObjectProxy
    
@end

////////////////////////////////////////////////////////////////////////////////
